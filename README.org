#+STARTUP: entitiespretty
#+STARTUP: showall indent
#+STARTUP: hidestars
#+OPTIONS: \n:t

* COMMENT requirement

#+BEGIN_SRC emacs-lisp
  (require 'yasnippet)
  (require 'ob-scheme)
  (require 'ob-js)
  (require 'ob-scala)
  (require 'ob-ruby)
#+END_SRC

#+RESULTS:
: ob-ruby

* Introduction & Guide

** About this repo

This is a workshop for introduce the Continuation Passing Style (CPS) of functional programming.

** How to run

#+BEGIN_SRC shell
  git clone git@github.com:SanCoder-Q/cps-ws.git
  cd cps-ws
  npm install
  npm start
#+END_SRC

** How to test

Jasmine 2.3 is used in this repo for unit test.

#+BEGIN_SRC scheme
  npm test
#+END_SRC

* Simple Linked List

To introduce the CPS, it's better to introduce it with benefit. A important application scenario of CPS is to apply iteration elegantly. Hence, we are going to implement a linked list using *java script* (since everyone should be familiar with it).

A linked list is composed of two memory-adjacent elements: ~Head~ and ~Tail~. The ~Head~ storage a piece of data and the ~Tail~ point to the next ~Head~ if it exist, otherwise it should be empty (~undefined~).

A simple ~List~ with a recurrent constructor has already defined in ~app.js~. Implement the ~List.prototype.forEach~ function to passing the test.

*Notice* : Please do *NOT* use any loop syntaxes in your method implement e.g. ~for~ or ~while~ or any loop method in dear ~lodash~.

* Change it to immutable function

Now you should notice that the ~forEach~ method is a mutable function: It takes two arguments a ~List~ object and an operation function. Plus, it never return. So you cannot use it in a chain. That's not very good.

Can you do something magic to make it immutable and return the operated new ~List~ object. Please pass all the tests without changing them. Still, do not use any loop syntaxes. They are just *syntax sugar*. And you need to see what behind them.
